function single_link_manipulator_simulation()
    % System parameters
    I = 1.0;     
    J = 1.0;     
    m0 = 1.0;     
    g = 9.81;  
    L = 1.0;     
    k = 1.0;     
    a = m0 * g * L / I; 
    b = k / I;   
    c = k / J;    
    d = 1 / J;    

    % Control parameters from Theorem 1
    K = 30;       % Control gain 
    delta = 1.1;  % Uncertainty parameter
    
    % Define lambda bound (Equation 7)
    q = 3; 
    n = 4;  % Number of states
    lambda_bound = 1 / (2 * (q + n - 1)); 
    lambda = 0.9 * lambda_bound;  
    
    % Values for r_i and s_l (Equation 9)
    r_i = [4.4, 3.3, 2.2];
    s_l = [2.2, 6.6, 6.6];  
    
    % Compute epsilon (Equation 8)
    epsilon = (lambda * K) / (2 * max([r_i, s_l]));

    % Event-triggering thresholds
    nu = 0.001;  
    w = 0.00005;  

    % Sliding surface coefficients
    M = [1, 3, 3];  

    % Initial conditions (z(0))
    z0 = [pi/6; 0; pi/6; 0];  
    t_span = [0, 50];  

    % Solve using ode45
    params = struct('M', M, 'K', K, 'lambda', lambda, 'epsilon', epsilon, ...
                    'delta', delta, 'nu', nu, 'w', w, 'a', a, 'b', b, 'c', c, 'd', d);

    [t, x] = ode45(@(t, x) manipulator_dynamics(t, x, params), t_span, z0);

    % Plot the results
    figure('Position', [100, 100, 1600, 1200], 'Color', 'w');
    plot(t, x(:,1), 'r', 'LineWidth', 4);
    hold on;
    plot(t, x(:,3), 'b--', 'LineWidth', 4);
    xlabel('Time (s)', 'FontSize', 24, 'FontWeight', 'bold');
    ylabel('Angle', 'FontSize', 24, 'FontWeight', 'bold');
    title('Angular Positions \\theta_1 and \\theta_2 Over Time', 'FontSize', 30, 'FontWeight', 'bold');
    legend('\\theta_1', '\\theta_2', 'Location', 'Best', 'FontSize', 24, 'FontWeight', 'bold');
    set(gca, 'FontSize', 18, 'FontWeight', 'bold');
    grid on;
    ylim([-1, 1.2]);
    yticks(-1:0.5:1); 
    print(gcf, 'high_res_figure.png', '-dpng', '-r300');
end

function dx = manipulator_dynamics(t, x, params)
    % Sliding surface
    sigma = compute_sigma(x, params.M);

    % State-dependent uncertainties
    [omega_0, omega_1, omega_2, omega_3] = compute_omega(x, params.a, params.b, params.c, params.d);

    % Event-triggered control
    u = event_triggered_control(x, sigma, params, omega_0, omega_1, omega_2, omega_3);

    % System dynamics update
    dx = [x(2);
          -params.a * sin(x(1)) - params.b * (x(1) - x(3));
          x(4);
          params.c * (x(1) - x(3)) + params.d * u];
end

function sigma = compute_sigma(x, M)
    sigma =  (M(1)*x(1) + M(2)*x(2) + M(3)*x(3) + x(4));  
end

function u = event_triggered_control(x, sigma, params, omega_0, omega_1, omega_2, omega_3)
    % Compute  \mathcal{A}_i^{(j)} and \mathcal{B}_l^{(j)}
    x_sharp = compute_x_sharp(x);
    sign_sigma = sign(sigma);

    A1 = compute_A(x_sharp, params.epsilon, sign_sigma, 4.4);
    A2 = compute_A(x_sharp, params.epsilon, sign_sigma, 3.3);
    A3 = compute_A(x_sharp, params.epsilon, sign_sigma, 2.2);

    B1 = compute_B(x_sharp, params.epsilon, 2.2);
    B2 = compute_B(x_sharp, params.epsilon, 6.6);
    B3 = compute_B(x_sharp, params.epsilon, 6.6);

    % Compute control law from Equation (21)
    u = -params.K * sign_sigma + abs(sign_sigma) * (A1 + A2 + A3 + B1 + B2 + B3);

    %  store previous states
    persistent A_prev B_prev
    if isempty(A_prev)
        A_prev = [A1, A2, A3]; 
        B_prev = [B1, B2, B3]; 
    end

    % Compute C_{r,j} from Equation (25)
    S = 2 * params.lambda * params.K * (3 + 4 - 1);  % 2 * λ * K * (q + n - 1)
    C_rj = sum(abs([A1, A2, A3] - A_prev)) + sum(abs([B1, B2, B3] - B_prev)) >= S;

    % Apply triggering mechanism from Equations (22)–(26)
    if abs(sigma) >= params.nu  % Condition (22)
        % Trigger update
        A_prev = [A1, A2, A3];
        B_prev = [B1, B2, B3];
    elseif abs(sigma) == params.w  % Condition (23)
        
        u = u; 
    elseif abs(sigma) < params.w  % Condition (24)
       % (no update)
        u = u; 
    elseif C_rj  
        % Update if condition C_{r,j} holds
        A_prev = [A1, A2, A3];
        B_prev = [B1, B2, B3];
    end
end

function A = compute_A(x_sharp, epsilon, sign_sigma, r_i)
    g_i = sin(x_sharp(1));
    if abs(g_i) >= epsilon
        A = (-1)^sign_sigma * r_i * sign(g_i);
    else
        A = (-1)^sign_sigma * (g_i / epsilon);
    end
end

function B = compute_B(x_sharp, epsilon, s_l)
    g_l = abs(x_sharp(1));  
    if abs(g_l) >= epsilon
        B = s_l * sign(g_l);
    else
        B = g_l / epsilon;
    end
end

function x_sharp = compute_x_sharp(x)
    x_sharp = [x(2), x(3), x(4)];
end

function [omega_0, omega_1, omega_2, omega_3] = compute_omega(x, a, b, c, d)
    theta1 = x(1);
    omega_0 = b * d;  
    omega_1 = -a * c;  
    omega_2 = a * sin(theta1);  
    omega_3 = -(a * cos(theta1) + b + c);  
end
